From a9dda90989827ac860c22f4cf44c16bf769499f0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Esa=C3=BA=20Bandeira?=
 <113884763+HadokBjorn@users.noreply.github.com>
Date: Mon, 7 Aug 2023 18:59:44 -0500
Subject: [PATCH] Revert "Revert "Feat/modalities with without hotel""

---
 package-lock.json                    |   2 +-
 package.json                         |   6 +-
 src/App.js                           |   2 +-
 src/assets/styles/style.css          |   1 +
 src/components/Tickets/HotelBox.js   |  74 ++++++++++++
 src/components/Tickets/TicketBox.js  |  65 +++++++---
 src/contexts/TicketTypeContext.js    |  15 +++
 src/contexts/useContextPayment.js    |   5 +
 src/hooks/api/useGetPayment.js       |  20 +++
 src/hooks/api/useSaveTicket.js       |  19 +++
 src/hooks/api/useTicket.js           |  21 ++++
 src/hooks/api/useTicketTypes.js      |  21 ++++
 src/hooks/api/useTickets.js          |  22 ++++
 src/hooks/useAsync.js                |   4 +-
 src/pages/Dashboard/Payment/index.js | 174 +++++++++++++++++++++------
 src/services/enrollmentApi.js        |   1 -
 src/services/eventApi.js             |   1 -
 src/services/ticketApi.js            |  31 +++++
 18 files changed, 422 insertions(+), 62 deletions(-)
 create mode 100644 src/components/Tickets/HotelBox.js
 create mode 100644 src/contexts/TicketTypeContext.js
 create mode 100644 src/contexts/useContextPayment.js
 create mode 100644 src/hooks/api/useGetPayment.js
 create mode 100644 src/hooks/api/useSaveTicket.js
 create mode 100644 src/hooks/api/useTicket.js
 create mode 100644 src/hooks/api/useTicketTypes.js
 create mode 100644 src/hooks/api/useTickets.js
 create mode 100644 src/services/ticketApi.js

diff --git a/package-lock.json b/package-lock.json
index b3f3ac6..abde4fc 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -26,7 +26,7 @@
         "react-input-mask": "^2.0.4",
         "react-loader-spinner": "^4.0.0",
         "react-router-dom": "^6.3.0",
-        "react-scripts": "4.0.3",
+        "react-scripts": "^4.0.3",
         "react-toastify": "^7.0.4",
         "react-useinterval": "^1.0.2",
         "styled-components": "^5.3.0",
diff --git a/package.json b/package.json
index 5600832..0186285 100644
--- a/package.json
+++ b/package.json
@@ -21,14 +21,14 @@
     "react-input-mask": "^2.0.4",
     "react-loader-spinner": "^4.0.0",
     "react-router-dom": "^6.3.0",
-    "react-scripts": "4.0.3",
+    "react-scripts": "^4.0.3",
     "react-toastify": "^7.0.4",
     "react-useinterval": "^1.0.2",
     "styled-components": "^5.3.0",
     "web-vitals": "^1.1.2"
   },
   "scripts": {
-    "start": "react-scripts --openssl-legacy-provider start",
+    "start": "react-scripts start",
     "build": "react-scripts build",
     "test": "react-scripts test",
     "eject": "react-scripts eject",
@@ -135,4 +135,4 @@
     "husky": "^7.0.2",
     "lint-staged": "^11.1.2"
   }
-}
\ No newline at end of file
+}
diff --git a/src/App.js b/src/App.js
index 8bd12bd..2dd7056 100644
--- a/src/App.js
+++ b/src/App.js
@@ -60,7 +60,7 @@ function ProtectedRouteGuard({ children }) {
   const token = useToken();
 
   if (!token) {
-    return <Navigate to="/sign-in" />;
+    //return <Navigate to="/sign-in" />;
   }
 
   return <>
diff --git a/src/assets/styles/style.css b/src/assets/styles/style.css
index 816c9ca..3739561 100644
--- a/src/assets/styles/style.css
+++ b/src/assets/styles/style.css
@@ -7,5 +7,6 @@
 }
 
 body {
+  font-family: "Lexend Deca", sans-serif;
   font-family: 'Roboto', sans-serif;
 }
\ No newline at end of file
diff --git a/src/components/Tickets/HotelBox.js b/src/components/Tickets/HotelBox.js
new file mode 100644
index 0000000..c51c3d6
--- /dev/null
+++ b/src/components/Tickets/HotelBox.js
@@ -0,0 +1,74 @@
+import styled from 'styled-components';
+
+export default function HotelBox({
+  includesHotel,
+  setShow,
+  setPrice,
+  selectedHotel,
+  setSelectedHotel,
+  setTicketTypeId
+}) {
+  function selectHotel(id) {
+    if (selectedHotel.includes(id)) {
+      setSelectedHotel([]);
+      setShow(false);
+      setPrice(0);
+      setTicketTypeId(0); // Reset ticketTypeId when the hotel is deselected
+    } else {
+      setSelectedHotel([id]);
+      setShow(true);
+      setPrice(id === 2 ? 250 : 600); // Set price to 0 if it's 'Sem hotel', otherwise set it to 350
+
+      // Use different ticket type ids for 'Com hotel' and 'Sem hotel'
+      setTicketTypeId(id === 2 ? 2 : 3); // Set ticketTypeId to 2 if it's 'Sem hotel', otherwise set it to 3
+    }
+  }
+
+  return (
+    <>
+      {/* Show the hotel with id 2 (Sem hotel) */}
+      <StyledBox onClick={() => selectHotel(2)} selected={selectedHotel.includes(2)}>
+        <h2>Sem hotel</h2>
+        <h4>+ R$ 0</h4>
+      </StyledBox>
+
+      {/* Show the hotel with id 3 */}
+      <StyledBox onClick={() => selectHotel(3)} selected={selectedHotel.includes(3)}>
+        <h2>Hotel</h2>
+        <h4>+ R$ 350</h4>
+      </StyledBox>
+    </>
+  );
+}
+
+const StyledBox = styled.div`
+  margin: 10px 30px 0 0;
+  width: 145px;
+  height: 145px;
+  border-radius: 20px;
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  cursor: pointer;
+  background-color: ${(props) => (props.selected ? '#FFEED2' : 'white')};
+  border: ${(props) => (props.selected ? 'solid 2px #CECECE;' : 'solid 1px #CECECE;')};
+
+  :hover {
+    border: solid 2px #cecece;
+  }
+
+  h2 {
+    margin-top: 0 !important;
+    font-size: 16px;
+    font-weight: 400;
+    color: #454545 !important;
+  }
+
+  h4 {
+    margin-top: 5px;
+    font-size: 14px;
+    font-weight: 400;
+    color: #898989 !important;
+  }
+}`;
diff --git a/src/components/Tickets/TicketBox.js b/src/components/Tickets/TicketBox.js
index 6531f1f..431351e 100644
--- a/src/components/Tickets/TicketBox.js
+++ b/src/components/Tickets/TicketBox.js
@@ -1,28 +1,55 @@
 import styled from 'styled-components';
 
-export default function TicketBox({ id, name, price, isRemote, setShow, setPrice, selected, setSelected }) {
+export default function TicketBox({
+  id,
+  name,
+  price,
+  isRemote,
+  setShow,
+  setPrice,
+  selected,
+  setSelected,
+  setIncludesHotel,
+  setIsRemote,
+  setTicketTypeId
+}) {
   function select() {
     if (selected.includes(id)) {
       setSelected([]);
       setShow(false);
+      if (isRemote) {
+        setPrice(0); // Set price to 0 only if it's a remote ticket
+      }
+      setIncludesHotel(false);
+      setIsRemote(false);
+      setTicketTypeId(0); // Reset ticketTypeId when the ticket is deselected
     } else {
       setSelected([id]);
-      if (isRemote === true) {
+      if (isRemote) {
         setShow(true);
-        setPrice(price);
+        setPrice(100);
+        setIncludesHotel(false);
+        setIsRemote(true);
+        setTicketTypeId(1);
+      } else {
+        setShow(false);
+        setPrice(250);
+        setIncludesHotel(true);
+        setIsRemote(false);
+        setTicketTypeId(2);
       }
     }
-    if (isRemote === false) setShow(false);
   }
 
   return (
-    <StyledBox
-      onClick={() => select()}
-      selected={selected}
-      id={id}>
-      <h2>{name}</h2>
-      <h4>{`R$ ${price}`}</h4>
-    </StyledBox>
+    <>
+      {id === 1 || id === 2 ? (
+        <StyledBox onClick={() => select()} selected={selected.includes(id)} id={id}>
+          <h2>{name}</h2>
+          <h4>{`R$ ${price}`}</h4>
+        </StyledBox>
+      ) : null}
+    </>
   );
 }
 
@@ -36,24 +63,24 @@ const StyledBox = styled.div`
   align-items: center;
   justify-content: center;
   cursor: pointer;
-  background-color: ${(props) => (!props.selected.includes(props.id) ? 'white' : '#FFEED2')};
-  border: ${(props) => (!props.selected.includes(props.id) ? 'solid 1px #CECECE;' : '')};
+  background-color: ${(props) => (!props.selected ? 'white' : '#FFEED2')};
+  border: ${(props) => (!props.selected ? 'solid 1px #CECECE;' : '')};
 
-    :hover {
-      border: solid 2px #CECECE;
-    }
+  :hover {
+    border: solid 2px #cecece;
+  }
 
   h2 {
-    margin-top: 0!important;
+    margin-top: 0 !important;
     font-size: 16px;
     font-weight: 400;
-    color: #454545!important;
+    color: #454545 !important;
   }
 
   h4 {
     margin-top: 5px;
     font-size: 14px;
     font-weight: 400;
-    color: #898989!important;
+    color: #898989 !important;
   }
 `;
diff --git a/src/contexts/TicketTypeContext.js b/src/contexts/TicketTypeContext.js
new file mode 100644
index 0000000..7635c0f
--- /dev/null
+++ b/src/contexts/TicketTypeContext.js
@@ -0,0 +1,15 @@
+import { createContext, useEffect, useState } from 'react';
+import useTicketReservation from '../hooks/api/useTicket';
+
+const TicketTypesContext = createContext();
+export default TicketTypesContext;
+
+export function TicketTypesProvider({ children }) {
+  const [ticketTypes, setTicketTypes] = useState([]);
+  const { ticketTypesData } = useTicketReservation();
+  useEffect(() => {
+    setTicketTypes(ticketTypesData);
+  });
+
+  return <TicketTypesContext.Provider value={{ ticketTypes, setTicketTypes }}>{children}</TicketTypesContext.Provider>;
+}
diff --git a/src/contexts/useContextPayment.js b/src/contexts/useContextPayment.js
new file mode 100644
index 0000000..ac46b89
--- /dev/null
+++ b/src/contexts/useContextPayment.js
@@ -0,0 +1,5 @@
+import { createContext } from "react";
+
+const useContextPayment = createContext();
+
+export { useContextPayment };
\ No newline at end of file
diff --git a/src/hooks/api/useGetPayment.js b/src/hooks/api/useGetPayment.js
new file mode 100644
index 0000000..0afc500
--- /dev/null
+++ b/src/hooks/api/useGetPayment.js
@@ -0,0 +1,20 @@
+import useToken from './useToken';
+import useAsync from './useAsync';
+
+export default function useGetPayment() {
+  const { token } = useToken();
+
+  const {
+    data: payment,
+    loading: loadingPayment,
+    error: errorPayment,
+    act: getPayment,
+  } = useAsync(() => getPayment(token));
+
+  return {
+    payment,
+    loadingPayment,
+    errorPayment,
+    getPayment,
+  };
+}
diff --git a/src/hooks/api/useSaveTicket.js b/src/hooks/api/useSaveTicket.js
new file mode 100644
index 0000000..adae24b
--- /dev/null
+++ b/src/hooks/api/useSaveTicket.js
@@ -0,0 +1,19 @@
+import * as ticketApi from '../../services/ticketApi';
+import useAsync from '../useAsync';
+import useToken from '../useToken';
+
+export default function useSaveTicket() {
+  const token = useToken();
+
+  const {
+    loading: saveTicketLoading,
+    error: saveTicketError,
+    act: saveTicket,
+  } = useAsync((data) => ticketApi.saveTicketType(data, token));
+
+  return {
+    saveTicketLoading,
+    saveTicketError,
+    saveTicket,
+  };
+}
diff --git a/src/hooks/api/useTicket.js b/src/hooks/api/useTicket.js
new file mode 100644
index 0000000..c93541a
--- /dev/null
+++ b/src/hooks/api/useTicket.js
@@ -0,0 +1,21 @@
+import useAsync from '../useAsync';
+import useToken from '../useToken';
+
+import * as ticketApi from '../../services/ticketApi';
+
+export default function useUserTicket() {
+  const token = useToken();
+  const {
+    data: userTicket,
+    loading: userTicketLoading,
+    error: userTicketError,
+    act: getUserTicket
+  } = useAsync(() => ticketApi.getUserTicket(token));
+
+  return {
+    userTicket,
+    userTicketLoading,
+    userTicketError,
+    getUserTicket
+  };
+};
\ No newline at end of file
diff --git a/src/hooks/api/useTicketTypes.js b/src/hooks/api/useTicketTypes.js
new file mode 100644
index 0000000..62a8647
--- /dev/null
+++ b/src/hooks/api/useTicketTypes.js
@@ -0,0 +1,21 @@
+import * as ticketApi from '../../services/ticketApi';
+import useAsync from '../useAsync';
+import useToken from '../useToken';
+
+export default function useTicketTypes() {
+  const token = useToken();
+
+  const {
+    data: ticketTypes,
+    loading: ticketLoading,
+    error: ticketError,
+    act: getTicketTypes,
+  } = useAsync(() => ticketApi.getTicketTypes(token));
+
+  return {
+    ticketTypes,
+    ticketLoading,
+    ticketError,
+    getTicketTypes,
+  };
+}
diff --git a/src/hooks/api/useTickets.js b/src/hooks/api/useTickets.js
new file mode 100644
index 0000000..398ef9d
--- /dev/null
+++ b/src/hooks/api/useTickets.js
@@ -0,0 +1,22 @@
+import useAsync from '../useAsync';
+import useToken from '../useToken';
+
+import * as ticketsApi from '../../services/ticketsApi';
+
+export default function useTickets() {
+  const token = useToken();
+
+  const {
+    data: ticket,
+    loading: ticketsLoading,
+    error: ticketsError,
+    act: getTicket,
+  } = useAsync(() => ticketsApi.getUserTicket(token));
+
+  return {
+    ticket,
+    ticketsLoading,
+    ticketsError,
+    getTicket,
+  };
+}
diff --git a/src/hooks/useAsync.js b/src/hooks/useAsync.js
index 207b100..70a670c 100644
--- a/src/hooks/useAsync.js
+++ b/src/hooks/useAsync.js
@@ -15,7 +15,7 @@ export default function useAsync(handler, immediate = true) {
       setLoading(false);
       return data;
     } catch (err) {
-      setError(error);
+      setError(err);
       setLoading(false);
       throw err;
     }
@@ -33,6 +33,6 @@ export default function useAsync(handler, immediate = true) {
     data,
     loading,
     error,
-    act
+    act,
   };
 }
diff --git a/src/pages/Dashboard/Payment/index.js b/src/pages/Dashboard/Payment/index.js
index a293c8f..9b1a575 100644
--- a/src/pages/Dashboard/Payment/index.js
+++ b/src/pages/Dashboard/Payment/index.js
@@ -1,3 +1,13 @@
+import { useEffect, useState } from 'react';
+import styled from 'styled-components';
+import useToken from '../../../hooks/useToken';
+import TicketBox from '../../../components/Tickets/TicketBox';
+import HotelBox from '../../../components/Tickets/HotelBox';
+import { getPersonalInformations } from '../../../services/enrollmentApi';
+import { toast } from 'react-toastify';
+import useTicketTypes from '../../../hooks/api/useTicketTypes';
+import api from '../../../services/api'; // Importe o serviço de API, se não estiver importado.
+
 import { useEffect, useState } from 'react';
 import styled from 'styled-components';
 import api from '../../../services/api';
@@ -10,47 +20,120 @@ export default function Payment() {
   const [selected, setSelected] = useState([]);
   const [show, setShow] = useState(false);
   const [price, setPrice] = useState(0);
+  const [includesHotel, setIncludesHotel] = useState(false);
+  const [isRemote, setIsRemote] = useState(false);
+  const [selectedHotel, setSelectedHotel] = useState([]);
+  const [hasEnrollment, setHasEnrollment] = useState(false);
+
+  // New
+  const [ticketTypeId, setTicketTypeId] = useState(0);
+  const { ticketTypes } = useTicketTypes();
+
+  useEffect(() => {
+    setTypes(ticketTypes);
+  }, [ticketTypes]);
+
+  useEffect(() => {
+    async function checkUserEnrollment() {
+      try {
+        const personalInformations = await getPersonalInformations(token);
+        setHasEnrollment(personalInformations !== null);
+      } catch (err) {
+        console.log(err);
+      }
+    }
+
+    checkUserEnrollment();
+  }, [token]);
+
+  async function submit() {
+    const enrrolmentId = await api.get('/enrollments', {
+      headers: {
+        Authorization: `Bearer ${token}`,
+      },
+    });
+
+    const body = {
+      ticketTypeId: ticketTypeId,
+      enrrolmentId: enrrolmentId.data.id,
+      status: 'RESERVED'
+    };
+
+    console.log(body);
 
-  async function getTypes() {
     try {
-      const response = await api.get('/tickets/types', {
+      const response = await api.post('/tickets', body, {
         headers: {
           Authorization: `Bearer ${token}`,
         },
       });
-      setTypes(response.data);
-    } catch (err) {
 
+      toast.success('Ingresso comprado com sucesso!');
+    } catch (err) {
+      toast.error('Erro ao comprar ingresso');
     }
   }
 
-  useEffect(() => {
-    getTypes();
-  }, []);
-
   return (
-    <TicketsPageContainer>
-      <div>
-        <h1>Ingresso e Pagamento</h1>
-        <h2>Primeiro escolha sua modalidade de pagamento</h2>
-      </div>
-      <TicketsContainer>
-        {types.map((type) => (<TicketBox
-          key={type.id}
-          name={type.name}
-          price={type.price}
-          id={type.id}
-          isRemote={type.isRemote}
-          setShow={setShow}
-          setPrice={setPrice}
-          selected={selected}
-          setSelected={setSelected} />))}
-      </TicketsContainer>
-      <CheckOutContainer show={show}>
-        <h3>Fechado! O total ficou em <span>R$ {price}</span>. Agora é só confirmar:</h3>
-        <button>RESERVAR INGRESSO</button>
-      </CheckOutContainer>
-    </TicketsPageContainer>
+    <>
+      {hasEnrollment ? (
+        <>
+          <TicketsPageContainer>
+            <div>
+              <h1>Ingresso e Pagamento</h1>
+              <h2>Primeiro escolha sua modalidade de pagamento</h2>
+            </div>
+            <TicketsContainer>
+              {types.map((type) => (
+                <TicketBox
+                  key={type.id}
+                  name={type.name}
+                  price={type.price}
+                  id={type.id}
+                  isRemote={type.isRemote}
+                  setShow={setShow}
+                  setPrice={setPrice}
+                  selected={selected}
+                  setSelected={setSelected}
+                  setIncludesHotel={setIncludesHotel}
+                  setIsRemote={setIsRemote}
+                  selectedHotel={selectedHotel}
+                  setTicketTypeId={setTicketTypeId}
+                  type={type}
+                />
+              ))}
+            </TicketsContainer>
+            {!isRemote && includesHotel && (
+              <>
+                <div>
+                  <h2>Ótimo! Agora escolha sua modalidade de hospedagem</h2>
+                </div>
+                <HotelsContainer>
+                  <HotelBox
+                    includesHotel={true}
+                    setShow={setShow}
+                    setPrice={setPrice}
+                    selectedHotel={selectedHotel}
+                    setSelectedHotel={setSelectedHotel}
+                    setTicketTypeId={setTicketTypeId}
+                  />
+                </HotelsContainer>
+              </>
+            )}
+            <CheckOutContainer show={show}>
+              <h3>
+                Fechado! O total ficou em <span>R$ {price}</span>. Agora é só confirmar:
+              </h3>
+              <button onClick={submit}>RESERVAR INGRESSO</button>
+            </CheckOutContainer>
+          </TicketsPageContainer>
+        </>
+      ) : (
+        <ErrorContainer>
+          <h3> Você precisa completar sua inscrição antes de prosseguir pra escolha de ingresso </h3>
+        </ErrorContainer>
+      )}
+    </>
   );
 }
 
@@ -67,7 +150,7 @@ const TicketsPageContainer = styled.div`
     margin-top: 34px;
     font-size: 20px;
     font-weight: 400;
-    color: #8E8E8E
+    color: #8e8e8e;
   }
 `;
 
@@ -76,13 +159,18 @@ const TicketsContainer = styled.div`
   display: flex;
 `;
 
+const HotelsContainer = styled.div`
+  margin-top: 15px;
+  display: flex;
+`;
+
 const CheckOutContainer = styled.div`
   margin-top: 15px;
   display: ${(props) => (props.show === false ? 'none' : 'flex')};
   flex-direction: column;
   h3 {
     margin-top: 30px;
-    color: #8E8E8E;
+    color: #8e8e8e;
     font-size: 20px;
     font-weight: 400px;
   }
@@ -99,11 +187,29 @@ const CheckOutContainer = styled.div`
     border-radius: 4px;
     font-size: 13px;
     background-color: #e0e0e0;
-    box-shadow: 0px 2px 10px 2px rgba(221,225,230,0.94);
+    box-shadow: 0px 2px 10px 2px rgba(221, 225, 230, 0.94);
     cursor: pointer;
 
     :hover {
-      border: solid 2px #CECECE;
+      border: solid 2px #cecece;
     }
   }
 `;
+
+const ErrorContainer = styled.div`
+  display: flex;
+  justify-content: center;
+  align-items: center;
+
+  width: 100%;
+  height: 80%;
+
+  div {
+    width: 50%;
+  }
+
+  font-size: 20px;
+  font-weight: 400;
+  color: #8e8e8e;
+  line-height: 24px;
+`;
diff --git a/src/services/enrollmentApi.js b/src/services/enrollmentApi.js
index ea33d69..f6fd6f6 100644
--- a/src/services/enrollmentApi.js
+++ b/src/services/enrollmentApi.js
@@ -19,4 +19,3 @@ export async function getPersonalInformations(token) {
 
   return response.data;
 }
-//
diff --git a/src/services/eventApi.js b/src/services/eventApi.js
index 9b545eb..3a52a29 100644
--- a/src/services/eventApi.js
+++ b/src/services/eventApi.js
@@ -4,4 +4,3 @@ export async function getEventInfo() {
   const response = await api.get('/event');
   return response.data;
 }
-//
diff --git a/src/services/ticketApi.js b/src/services/ticketApi.js
new file mode 100644
index 0000000..5315e44
--- /dev/null
+++ b/src/services/ticketApi.js
@@ -0,0 +1,31 @@
+import api from './api';
+
+export async function getUserTicket(token) {
+  const response = await api.get('/tickets', {
+    headers: {
+      Authorization: `Bearer ${token}`,
+    },
+  });
+
+  return response.data;
+}
+
+export async function getTicketTypes(token) {
+  const response = await api.get('/tickets/types', {
+    headers: {
+      Authorization: `Bearer ${token}`,
+    },
+  });
+
+  return response.data;
+}
+
+export async function saveTicketType(body, token) {
+/* const response = await api.post('/tickets', body, {
+    headers: {
+      Authorization: `Bearer ${token}`,
+    },
+  });
+
+  return response.data;*/
+}
-- 
2.41.0

